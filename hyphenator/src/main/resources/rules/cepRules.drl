global Integer L

rule "SymbolEvent - critical section"
when
    $t : model.Text(inCriticalSection == true)
    $s : model.events.SymbolEvent() over window:length(1)
then
    System.out.println("SymbolEvent in critical section -> " + $s);
end

// 2️⃣ SymbolEvent - all L+1 events are Symbol/Space
// rule "SymbolEvent - all symbols/spaces"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SymbolEvent() over window:length(1)
//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )
//     forall( $e : Object() from $recent
//             ( $e instanceof SymbolEvent
//               or $e instanceof SpaceEvent ) )
// then
//     System.out.println("SymbolEvent all symbols/spaces -> " + $s);
// end

// // 3️⃣ SymbolEvent - after last LineBreak + offset > L
// rule "SymbolEvent - after last linebreak"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SymbolEvent() over window:length(1)
//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )
//     $lb : LineBreakEvent($offset : offset) from $recent
//     not LineBreakEvent(this after $lb) from $recent
//     $count : Number(intValue > (L - $offset))
//         from accumulate(
//             $e : Object() from $recent
//             and not LineBreakEvent()
//             and this after $lb,
//             count($e)
//         )
// then
//     System.out.println("SymbolEvent after last linebreak -> " + $s);
// end

// // 4️⃣ SymbolEvent - fallback else
// rule "SymbolEvent - else"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SymbolEvent() over window:length(1)

//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )

//     // neither "all symbols/spaces" nor "after last linebreak" matched
//     not ( forall( $e : Object() from $recent
//                   ( $e instanceof SymbolEvent
//                     or $e instanceof SpaceEvent ) ) )
//     not ( $lb : LineBreakEvent($offset : offset) from $recent
//            not LineBreakEvent(this after $lb) from $recent
//            $count : Number(intValue > (L - $offset))
//                from accumulate(
//                    $e : Object() from $recent
//                    and not LineBreakEvent()
//                    and this after $lb,
//                    count($e)
//                ) )
// then
//     System.out.println("SymbolEvent else case -> " + $s);
// end

// 1️⃣ SpaceEvent in critical section
rule "SpaceEvent - critical section"
when
    $t : model.Text(inCriticalSection == true)
    $s : model.events.SpaceEvent() over window:length(1)
then
    System.out.println("SpaceEvent in critical section -> " + $s);
end

// // 2️⃣ SpaceEvent - all L+1 events are Symbol/Space
// rule "SpaceEvent - all symbols/spaces"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SpaceEvent() over window:length(1)
//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )
//     forall( $e : Object() from $recent
//             ( $e instanceof SymbolEvent
//               or $e instanceof SpaceEvent ) )
// then
//     System.out.println("SpaceEvent all symbols/spaces -> " + $s);
// end

// // 3️⃣ SpaceEvent - after last LineBreak + offset > L
// rule "SpaceEvent - after last linebreak"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SpaceEvent() over window:length(1)
//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )
//     $lb : LineBreakEvent($offset : offset) from $recent
//     not LineBreakEvent(this after $lb) from $recent
//     $count : Number(intValue > (L - $offset))
//         from accumulate(
//             $e : Object() from $recent
//             and not LineBreakEvent()
//             and this after $lb,
//             count($e)
//         )
// then
//     System.out.println("SpaceEvent after last linebreak -> " + $s);
// end

// // 4️⃣ SpaceEvent - fallback else
// rule "SpaceEvent - else"
// when
//     $t : Text(inCriticalSection == false)
//     $s : SpaceEvent() over window:length(1)

//     $recent : java.util.List() from collect(
//         (SymbolEvent() or SpaceEvent() or LineBreakEvent()) over window:length(L+1)
//     )

//     // neither "all symbols/spaces" nor "after last linebreak" matched
//     not ( forall( $e : Object() from $recent
//                   ( $e instanceof SymbolEvent
//                     or $e instanceof SpaceEvent ) ) )
//     not ( $lb : LineBreakEvent($offset : offset) from $recent
//            not LineBreakEvent(this after $lb) from $recent
//            $count : Number(intValue > (L - $offset))
//                from accumulate(
//                    $e : Object() from $recent
//                    and not LineBreakEvent()
//                    and this after $lb,
//                    count($e)
//                ) )
// then
//     System.out.println("SpaceEvent else case -> " + $s);
// end
